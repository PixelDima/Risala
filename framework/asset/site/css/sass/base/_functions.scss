@function rhythm($lines: 1, $font-size: $base-font-size, $offset: 0) {

  @if not $relative-font-sizing and $font-size != $base-font-size {
    @warn "$relative-font-sizing is false but a relative font size was passed to the rhythm function";
  }

  $rhythm: $font-unit * ($lines * $base-line-height - $offset) / $font-size;
  // Round the pixels down to nearest integer.
  @if unit($rhythm) == px {
    $rhythm: floor($rhythm);
  }

  @return $rhythm;
}

@function strip-units($val) {
  @return $val / ($val * 0 + 1);
}

@function em($size-in-px, $context: $base-font-size) {
  //Convert pixels to ems
  @if not unitless($size-in-px) {
    $size-in-px: strip-units($size-in-px);
  }
  @if not unitless($context) {
    $context: strip-units($context);
  }
  @return ($size-in-px / $context) // 1em;
}

@function px-to-em($px, $base-px: $base-font-size) {
  @return strip-units($px) / $base-px * 1em;
}

@function px-to-rem($px, $base-px: $base-font-size) {
  @return strip-units($px) / $base-px * 1rem;
}

@function sp_dima($sp,$font_size:0,$line_height:0) {
  $s_area: $font_size * 16.666 / 100;
  @return px-to-rem($sp - ($line_height - $font_size) /2 - $s_area);
}

@function gcd($a, $b) {
  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
  @if ($b !=0) {
    @return gcd($b, $a % $b);
  } @else {
    @return abs($a);
  }
}

@function nthRoot($num, $n: 2, $prec: 12) {
  // From: http://rosettacode.org/wiki/Nth_root#JavaScript
  $x: 1;
  @for $i from 0 through $prec {
    $x: 1 / $n * (($n - 1) * $x + ($num / pow($x, $n - 1)));
  }
  @return $x;
}

@function pow($base, $exponent, $prec: 12) {
  // Handles decimal exponents by trying to convert them into a fraction and then use a nthRoot-algorithm for parts of the calculation
  @if (floor($exponent) !=$exponent) {
    $prec2: pow(10, $prec);
    $exponent: round($exponent * $prec2);
    $denominator: gcd($exponent, $prec2);
    @return nthRoot(pow($base, $exponent / $denominator), $prec2 / $denominator, $prec);
  }
  $value: $base;
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  } @else if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }
  @return $value;
}

@function luma($color) {
  // Adapted from: https://gist.github.com/voxpelli/6304812
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();
  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;
    $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));
    $rgba2: append($rgba2, $rgb);
  }
  @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;
}

@function color-contrast($color) {
  @return if(luma($color) < 51, #ffffff, #000000)
}